#!/usr/bin/env python3
#ddev-generated

## Description: Create a git branch from a Teamwork url/id
## Usage: branch
## Example: ddev branch

# Given a Teamwork url or ID, and optional name, creates a new branch
#
# Prompts for a Teamwork url/id if none provided, and then for an optional branch name.
#
# Given the following url and string:
#
# - https://projects.YOURCOMPANY.com/app/tasks/17360561
# - qa_rework
#
# the script will create a git branch with the following name:
#
# 202409_T-17360561__new_branching_patterns
#
# Where:
#
# - 17360561 is the Teamwork card identifier
# - 2024 is the year
# - 09 is the current month
# - new_branching_patterns is the description provided
#
# Can be called like:
#
# ddev branch
# ddev branch https://projects.YOURCOMPANY.com/app/tasks/17360561 "example task"
# ddev branch https://projects.YOURCOMPANY.com/app/tasks/17360561
# ddev branch 17360561
# ddev branch 17360561 example_task


import sys
from urllib.parse import urlparse
import datetime
import subprocess

# Function to extract the ID from the URL or use the provided ID directly
def extract_id(input_value):
    if input_value.isdigit():
        return input_value  # If it's purely numeric, treat it as the ID directly
    else:
        path = urlparse(input_value).path
        return path.split('/')[-1] if path.split('/')[-1].isdigit() else None

# Get current year and month
current_year = datetime.datetime.now().year
current_month = datetime.datetime.now().month

# Main script
def main():
    # Check if the URL/ID is provided as a command-line argument
    if len(sys.argv) > 1:
        input_value = sys.argv[1]
    else:
        # Ask for the URL/ID if not provided
        input_value = input("Enter the URL or ID: ").strip()

    # Validate the ID from the URL or use it directly if it's an ID
    task_id = extract_id(input_value)

    if not task_id:
        print("Error: No valid URL or ID provided.")
        sys.exit(1)

    # Check if the custom text is provided as a command-line argument
    if len(sys.argv) > 2:
        custom_text = sys.argv[2]
    else:
        # Prompt for custom text if not provided
        custom_text = input("Enter task description: ").strip()

    # Replace spaces with hyphens and make the text Git-friendly
    custom_text = custom_text.replace(" ", "-")

    # Create the branch name in the format YEAR/MONTH/ID-description (without the extra dash if no description)
    if custom_text:
        branch_name = f"{current_year}{current_month:02}_T-{task_id}__{custom_text}"
    else:
        branch_name = f"{current_year}{current_month:02}_T-{task_id}"

    # Ensure only valid characters are in the branch name
    branch_name = "".join(c for c in branch_name if c.isalnum() or c in ['-', '_', '.'])

    # Print the branch name
    print(f"Creating new Git branch: {branch_name}")

    # Execute git command to create and switch to the new branch
    try:
        subprocess.run(["git", "checkout", "-b", branch_name], check=True)
        print(f"Successfully created and switched to branch '{branch_name}'")
    except subprocess.CalledProcessError as e:
        print(f"Error creating the branch: {e}")

if __name__ == "__main__":
    main()

